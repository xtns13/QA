git checkout pwd - переключиться в ветку
git reset --hard - перезалить каталог, если заглючило
pwd - отобразить рабочую директорию
cd - - вернуть в предыдущий каталог и обратно
cd ~ - перейти в домашний каталог
cd .. - перейти в родительский каталог относительно той в которой мы находимся
cd ../.. - перейти на два каталога выше и т.д.
clear - очистить консоль, но не очищает историю и можно смотреть через стрелочки
структура любой команды = имя + ключ + параметр
ls - отобразить содержимое папки
ls -l - выдача содержимого папки в длинном виде
ls + имя папки - отобразить содержмиое папки
ls -a + имя папки - показать все скрытые файлы и папки
ls -A + имя папки - показать все скрытые кроме . ..
ls -a - l + имя папки - или ls -al + имя папки объединяет предыдущик команды (ключи можно менять местами)
ls -lh - форма выдачи более поянтный (например размер отображается в килобайтах
ls -R - рекурсивная выдача т.е. отображает последовательно содежрмиое папок 
ls -RAlh - выдаст все директории и все скрытые файлы начиная с текущей в длинном развернутом виде
man + ls - вывести документацию по команде ls (открывается как раз в утилите less, исползуемой для просмотра текстового содержимого)
q - выход из документации
touch + имя файла - создать пустой файл (если файл существует то покажет время обращение к файлу)
touch "bad file" - создание файла с пробелом или обращение к файлу с пробелом
mkdir + имя папки- создать директорию
rmdir - удалить пустую! директорию
rm - удаление файла
rm -r two - удалить паку two
rm -r ./* - удалить все из текущей папки
rm -rf - удаляет все, папки и подпапки, даже системные файлы без запросов
rm -ri one - ключ i безопасное удаление с подтверждением для каждого файла
mv one/log.txt two - переместит файл log.txt в папку two
mv + папка/файл + куда_папка/файл - перемещение или переименование mv two/log.txt two/log2.txt - переименует файл в log2.txt (mv перезаписывает ссылку на файл, а сам файл не трогает, но  работает в рамках одной файловой системы, т.е. если надо переместить файл на другой жесткий диск, то он все таки должен там оказаться)
mv one/log.txt log.txt - скопирует файл
mv one/log.txt . - точка ссылка на текущую, эта команда скопируется в домашнюю папку
mv log.txt /home/user - перемещение файлы по длиному пути
cp + папка/файл + куда_папка/файл - почти тоже самое, только не перезаписывает ссылки, а именно копирует файлы или создает, что на много дольше
cp one/* two - скопировать все содержимое папки one в папку two
cat + имя файла - отображение текста и объединение текстовых файлов 
less + имя файла - для работы с текстовым файлом (при открытом сеансе есть поиск по содержимомме через /поисковый_запрос)
/fire - поиск по слову fire по тексту в редакторе less
nano + имя_файла - открыть в редакторе GNU nano, ctrl + x - выйти из файла
vi + имя файла - второй редактор ( i - вход в режим правки, Esc - выход из режима правки, :w - сохранение файла, :q выход из редактора, :q! - выхож из редактора без сохранения, :N - команда перехода на строку где N номер строки, /word поиск по слову word, dd - удаление строки, :u - отменить изменения)
grep + шаблон - поиск текста в файле, так он ищет начиная с корневого каталога (grep явл CASE зависимым, т.е. регистр поиска различается)
grep test log.txt - поиск текста, наичная с указанного каталога в файле log.txt
grep + шаблон + путь до файла
grep -i шаблон файл - -i игнорирование регистра букв
grep -v - показать только несовпавшие строки
grep -c - подсчитать количество строк совпадений
grep -R test one/ - рекурсивный поиск по директории one ( если вместо имени папки написать точку "." то это означает текущую директорию, будут выведены и поддиректории)
grep -e + шаблон - использование RegEx в шаблоне (grep -Re test[12] . - выведет все вхождения, где будет либо test1 либо test2)
find + папка + ключи - (find + папка + -name + шаблон - поиск по имени файла, например find . -name first_file)
find . -name *_file (гаходим все файлы с окончаним _file)
find . -name *.mp3 ( поиск всех файлов с заданынм расширением)
find . -type d ( поиск только по именам директорий)
find . -type d -name "one*" (поиск всех папок, которые начинаются с one)
find . -name "*t*" - поиск файлов и деректорий, где содержиться буква t
find . -name "*t*" -type f ( find -type f - поиск только по файлам)
find . -name "*.mp3" -delete (ключ delete - удалить найденные файлы)
find . -name *.txt -delete -print ( показать имена файлов удаленных)
echo "hello world" - вывод текста в консоль
echo $PATH - вывод системной переменной
echo "hello world" > file.txt ( запись результата команды в файл, символ ">" перезаписывает файл, для того, чтобы дополнить файл нужно исопльзовать ">>")
cat 1.file 2.file >> 3.file (соединит содержимое файлов 1,2 и добавит их в файл 3)
команда | команда ( передача выводы одной команды на ввод другой)
cat my.file | grep File (писк будет производиться в результатах работы команды cat)
ls | grep file - будет искать по file

ps - отображает список процессов терминала
ps x - процессы вне рамках терминала
ps u -процессы пользователя
ps au - все процессы терминала
ps aux - все процессы
top - вывести таблицу процессов
kill - убить процес по id
kill -l - показать ключи с килом
SIGTERM - рекомендованный ключ для закрытия процесса (штатно)
SIGKILL - сразу закрывает процесс
kill -9 pid - убить процесс немедленно (15 штатное закрытие)
pgrep bash - найти все pid процесов по имени bash
pkill bash - убить все процессы с именем bash
ping -c 3 google.com - количество пакетов
ping -c 3 -i 2 google.com - пингование с интервалов в 2 секунды ( по умолчанию 1)
ping -a включить звуковой сигнал
curl https:/example.com - команда для отправки get запроса
curl -L ya.ru - ключ -L разрешает переходить по ссылкам, когда с сайте идет перенаправление, по умолчанию сам curl не переходит по ссылкам
curl -L ya.ru --verbose - показать доп информацию
В дефолтном режиме отсылает запрос Get но так же может и post
curl https://reqres.in/api/users - получили первую страни пользователей
curl https://reqres.in/api/users?page=2 - отправка запроса с параметрами
curl -X POST https://reqres.in/api/login --data "email=peter@klaven" --data "password=cityslicka"
curl -H "хедер" - отправка запроса с хедером, напрмиер curl -H "Cookie: session=.......;" https://example.com
ssh testuser@ssh.learnqa.ru - доступ по ssh на удаленный сервер
exit - выход с удаленного соединения
scp testuser@ssh.learnqa.ru:/home/testuser/test.txt . - копирование с удаленной машины
scp test.txt testuser@ssh.learnqa.ru:/home/testuser/test3.txt - копирование на удаленную машину
sed - потоковый текстовый редактор
echo 123123 | sed 's/1/5/' - замена первой подстроки 
echo 123123 | sed 's/1/5/номер' - замена подстроки по номеру (т.е. замениться не первая единица, а та, которая соответствует "номер")
echo 123123 | sed 's/1/5/g' - параметр g гооврит о том, что следует заменить все единицы
sed s/test/Hello/ my.file >> hello.file
sed "3 s/test/hello/" my.file - заменить строку по номеру (в данонм случае строку номер 3)
sed "s/test/hello/;s/9/000/" my.file - замена по двум шаблонам
sed "s/test/helloworld/w new.file" my.file (запись результата в файл new.file из my.file, w = write
echo s/test/HiAgain/ >> sed_command.file ( если нужно запускать несколько sed то лучше сделать с ними такой файл и запускать их оттуда)
echo s/9/000/ >> sed_command.file
cat sed_command.file
sed -f sed_command.file my.file (-f означает подгрузить файл, запись команд из файла, my.file - это файл на котором ужно запустить)
curl https:/example.com | sed 's/Example Domain/Changed Header/' > index.html - получение страницы сайта, замена заголовка и создание файла с измененным содержимом
awk - построчная работа с файлами
echo "first second" | awk '{print $2}' ($0 - вся строка, $1 - первая строка, $2 - вторая строка) - получаем "second"
echo "this,is,a,table" | awk -F, '{print $1}' ( -F, - указываем, что разделитель "запятая", по умолчанию считается, что разделитель пробел, еще пример разделителя -F\; - нужено экранировать с помощью обратного слеша, т.к. точка с запятой считается концом команды)
echo a b c d e f | xargs - xargs сформировала последовательный список аргументов и передала его слудующей команде, если после xargs не укзана команда то это просто команда echo
echo 1.file 2.file | xargs файлы преобразовались в аргументы, которые можно использовать
echo 1.file 2.file | xargs cat - вывод содержимого этих файлов
echo "google.com ya.ru bing.com" > adds.file
cat adds.file | xargs -n 1 ping -c 1 - создание файла с сайтами и их опрос с помощью xargs
a="Hello world"
echo $a
$ echo 'echo "Hello world for every bash session"' >> ~/.bashrc - эта трока будет выводиться каждый раз при старте новое сесси bash
echo "A='Hello world'" >> ~/.bashrc - добавили переменную в баш
echo 'date +"%H:%M:%S"; whoami; pwd' >> ~/.bashrc
whoami; date +"%H:%M:%S"
WELCOME_BASH="["$(date +"%H:%M:%S")"]["$(whoami)"]["$(pwd)"]" - результат выполнения echo WELCOME_BASH будет [21:19:46][UnNameD][/home/UnNameD]
echo $PS1 - выведет значение переменной PS1, котора яотвечает за строку приветсвия консоли
/u - имя пользователя, /h - имя машины, /w - текущая директория, /t - время HH:mm:ss
PS2 - отвечает за разделитель в многострчных командах (по умолчанию слеш \ENTER разделитель)
alias имя="команда" - установить алиас для команды (например такой alias пше='git' (не опечатка))
cat bash.run - файл, где храняться команды, вроде скрипта
source bash.run - запустить bas-скрипт
source ~/.bashrc - обновить информацию, чтобы принялись изменения
history - история всех запущенных команд
!! - повторить последнюю команду из истории
!-n - выполнить команду за n команд до последней
ctrl+R - поиск по командам










